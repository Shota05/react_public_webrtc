{"ast":null,"code":"var _jsxFileName = \"/Users/komatsushota/Downloads/project_video_chat-master/client/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { addDoc, collection, onSnapshot } from 'firebase/firestore';\nimport * as firebaseJs from './firebase.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http://localhost:5001');\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState('');\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    }); // 書き込む内容としては、相手のID、自分のID、それらを結合したID。一番初期に書き込み、その結果をもらうでOK\n\n    (async () => {\n      const notifsCollectionRef = collection(firebaseJs.db, 'notifs');\n      const mes = await addDoc(notifsCollectionRef, {\n        name: 'ss'\n      });\n      setMe(mes);\n    })();\n\n    const unsub = onSnapshot(usersCollectionRef, querySnapshot => {\n      setUsers(querySnapshot.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      })));\n    });\n    return unsub; // これは、相手が上書きをしてきた場合のとき。\n\n    socket.on('callUser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answerCall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      // Send data to firebase\n      socket.emit('callUser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callAccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"WCD8xviLUIbJyClSRV/B7JoiY/M=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/komatsushota/Downloads/project_video_chat-master/client/src/Context.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","addDoc","collection","onSnapshot","firebaseJs","SocketContext","socket","ContextProvider","children","callAccepted","setCallAccepted","callEnded","setCallEnded","stream","setStream","name","setName","call","setCall","me","setMe","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","notifsCollectionRef","db","mes","unsub","usersCollectionRef","querySnapshot","setUsers","docs","map","doc","data","id","on","from","callerName","signal","isReceivingCall","answerCall","peer","initiator","trickle","emit","to","callUser","userToCall","signalData","leaveCall","destroy","window","location","reload"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { addDoc, collection, onSnapshot } from 'firebase/firestore';\nimport * as firebaseJs from './firebase.js';\n\nconst SocketContext = createContext();\n\nconst socket = io('http://localhost:5001');\n\nconst ContextProvider = ({ children }) => {\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState('');\n\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n      .then((currentStream) => {\n        setStream(currentStream);\n\n        myVideo.current.srcObject = currentStream;\n      });\n    // 書き込む内容としては、相手のID、自分のID、それらを結合したID。一番初期に書き込み、その結果をもらうでOK\n    (async () => {\n      const notifsCollectionRef = collection(firebaseJs.db, 'notifs');\n      const mes = await addDoc(notifsCollectionRef, { name: 'ss' });\n      setMe(mes);\n    })();\n    const unsub = onSnapshot(usersCollectionRef, (querySnapshot) => {\n      setUsers(\n        querySnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }))\n      );\n    });\n    return unsub;\n    // これは、相手が上書きをしてきた場合のとき。\n    socket.on('callUser', ({ from, name: callerName, signal }) => {\n      setCall({ isReceivingCall: true, from, name: callerName, signal });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n\n    const peer = new Peer({ initiator: false, trickle: false, stream });\n\n    peer.on('signal', (data) => {\n      socket.emit('answerCall', { signal: data, to: call.from });\n    });\n\n    peer.on('stream', (currentStream) => {\n      userVideo.current.srcObject = currentStream;\n    });\n\n    peer.signal(call.signal);\n\n    connectionRef.current = peer;\n  };\n\n  const callUser = (id) => {\n    const peer = new Peer({ initiator: true, trickle: false, stream });\n\n    peer.on('signal', (data) => {\n      // Send data to firebase\n      socket.emit('callUser', { userToCall: id, signalData: data, from: me, name });\n    });\n\n    peer.on('stream', (currentStream) => {\n      userVideo.current.srcObject = currentStream;\n    });\n\n    socket.on('callAccepted', (signal) => {\n      setCallAccepted(true);\n\n      peer.signal(signal);\n    });\n\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n\n    connectionRef.current.destroy();\n\n    window.location.reload();\n  };\n\n  return (\n    <SocketContext.Provider value={{\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n    }}\n    >\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport { ContextProvider, SocketContext };\n"]},"metadata":{},"sourceType":"module"}