{"ast":null,"code":"var _jsxFileName = \"/Users/komatsushota/Downloads/project_video_chat-master/client/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { addDoc } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http://localhost:5001');\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState('');\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    }); // 書き込む内容としては、相手のID、自分のID、それらを結合したID。一番初期に書き込み、その結果をもらうでOK \n\n    async () => {\n      const notifsCollectionRef = collection(db, 'notifs');\n      await addDoc(notifsCollectionRef, {\n        name: 'ss'\n      });\n    };\n\n    socket.on('me', id => {\n      setMe(id);\n      console.log(id);\n      console.log('s');\n    }); // これは、相手が上書きをしてきた場合のとき。\n\n    socket.on('callUser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answerCall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      // Send data to firebase\n      socket.emit('callUser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callAccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"WCD8xviLUIbJyClSRV/B7JoiY/M=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/komatsushota/Downloads/project_video_chat-master/client/src/Context.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","addDoc","SocketContext","socket","ContextProvider","children","callAccepted","setCallAccepted","callEnded","setCallEnded","stream","setStream","name","setName","call","setCall","me","setMe","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","notifsCollectionRef","collection","db","on","id","console","log","from","callerName","signal","isReceivingCall","answerCall","peer","initiator","trickle","data","emit","to","callUser","userToCall","signalData","leaveCall","destroy","window","location","reload"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { addDoc } from 'firebase/firestore';\n\nconst SocketContext = createContext();\n\nconst socket = io('http://localhost:5001');\n\nconst ContextProvider = ({ children }) => {\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState('');\n\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n      .then((currentStream) => {\n        setStream(currentStream);\n\n        myVideo.current.srcObject = currentStream;\n      });\n    // 書き込む内容としては、相手のID、自分のID、それらを結合したID。一番初期に書き込み、その結果をもらうでOK \n    (async()=>{\n      const notifsCollectionRef = collection(db, 'notifs');\n      await addDoc(notifsCollectionRef,{name:'ss'})\n    })\n    socket.on('me', (id) => {\n      setMe(id);\n      console.log(id);\n      console.log('s');\n    });\n    // これは、相手が上書きをしてきた場合のとき。\n    socket.on('callUser', ({ from, name: callerName, signal }) => {\n      setCall({ isReceivingCall: true, from, name: callerName, signal });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n\n    const peer = new Peer({ initiator: false, trickle: false, stream });\n\n    peer.on('signal', (data) => {\n      socket.emit('answerCall', { signal: data, to: call.from });\n    });\n\n    peer.on('stream', (currentStream) => {\n      userVideo.current.srcObject = currentStream;\n    });\n\n    peer.signal(call.signal);\n\n    connectionRef.current = peer;\n  };\n\n  const callUser = (id) => {\n    const peer = new Peer({ initiator: true, trickle: false, stream });\n\n    peer.on('signal', (data) => {\n      // Send data to firebase\n      socket.emit('callUser', { userToCall: id, signalData: data, from: me, name });\n    });\n\n    peer.on('stream', (currentStream) => {\n      userVideo.current.srcObject = currentStream;\n    });\n\n    socket.on('callAccepted', (signal) => {\n      setCallAccepted(true);\n\n      peer.signal(signal);\n    });\n\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n\n    connectionRef.current.destroy();\n\n    window.location.reload();\n  };\n\n  return (\n    <SocketContext.Provider value={{\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n    }}\n    >\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport { ContextProvider, SocketContext };\n"]},"metadata":{},"sourceType":"module"}