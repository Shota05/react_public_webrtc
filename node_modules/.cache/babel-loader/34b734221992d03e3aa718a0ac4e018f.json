{"ast":null,"code":"var _jsxFileName = \"/Users/komatsushota/Downloads/project_video_chat-master/client/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport Peer from 'simple-peer';\nimport { addDoc, doc, collection, updateDoc, query, where, onSnapshot } from 'firebase/firestore';\nimport { db } from './firebase.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState('');\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  const notifsCollectionRef = collection(db, 'notifs');\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    }); // 書き込む内容としては、相手のID、自分のID、それらを結合したID。一番初期に書き込み、その結果をもらうでOK\n\n    (async () => {\n      const mes = await addDoc(notifsCollectionRef, {\n        name: 'ss'\n      });\n      setMe(mes);\n    })();\n\n    const q = query(collection(db, 'notifs'), where('callUser', '==', 'ss'));\n    const unsub = q.onSnapshot(querySnapshot => {\n      setCall({ ...querySnapshot\n      });\n    });\n    return unsub;\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      const callingRef = doc(db, 'notifs', call.id);\n      updateDoc(callingRef, {\n        signalDataOpponent: data\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.data.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', async data => {\n      await addDoc(notifsCollectionRef, {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        signalDataOpponent: null\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    }); // Send data to firebase\n\n    return new Promise(resolve => {\n      const unsub = onSnapshot(doc(db, 'notifs', 'id'), snapshot => {\n        if (!snapshot.data.signalDataOpponent) {\n          return;\n        } // IDトークンのリフレッシュ\n\n\n        setCallAccepted(true);\n        peer.signal(snapshot.data.signalDataOpponent);\n        unsub();\n        resolve();\n      });\n    });\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"WCD8xviLUIbJyClSRV/B7JoiY/M=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/komatsushota/Downloads/project_video_chat-master/client/src/Context.js"],"names":["React","createContext","useState","useRef","useEffect","Peer","addDoc","doc","collection","updateDoc","query","where","onSnapshot","db","SocketContext","ContextProvider","children","callAccepted","setCallAccepted","callEnded","setCallEnded","stream","setStream","name","setName","call","setCall","me","setMe","myVideo","userVideo","connectionRef","notifsCollectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","mes","q","unsub","querySnapshot","answerCall","peer","initiator","trickle","on","data","callingRef","id","signalDataOpponent","signal","callUser","userToCall","signalData","from","Promise","resolve","snapshot","leaveCall","destroy","window","location","reload"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react';\nimport Peer from 'simple-peer';\nimport { addDoc, doc, collection, updateDoc, query, where, onSnapshot } from 'firebase/firestore';\nimport { db } from './firebase.js';\n\nconst SocketContext = createContext();\n\nconst ContextProvider = ({ children }) => {\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState('');\n\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  const notifsCollectionRef = collection(db, 'notifs');\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n      .then((currentStream) => {\n        setStream(currentStream);\n\n        myVideo.current.srcObject = currentStream;\n      });\n    // 書き込む内容としては、相手のID、自分のID、それらを結合したID。一番初期に書き込み、その結果をもらうでOK\n    (async () => {\n      const mes = await addDoc(notifsCollectionRef, { name: 'ss' });\n      setMe(mes);\n    })();\n    const q = query(collection(db, 'notifs'), where('callUser', '==', 'ss'));\n    const unsub = q.onSnapshot((querySnapshot) => {\n      setCall({ ...querySnapshot });\n    });\n    return unsub;\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n\n    const peer = new Peer({ initiator: false, trickle: false, stream });\n\n    peer.on('signal', (data) => {\n      const callingRef = doc(db, 'notifs', call.id);\n      updateDoc(callingRef, { signalDataOpponent: data });\n    });\n\n    peer.on('stream', (currentStream) => {\n      userVideo.current.srcObject = currentStream;\n    });\n\n    peer.signal(call.data.signal);\n\n    connectionRef.current = peer;\n  };\n\n  const callUser = (id) => {\n    const peer = new Peer({ initiator: true, trickle: false, stream });\n\n    peer.on('signal', async (data) => {\n      await addDoc(notifsCollectionRef, { userToCall: id, signalData: data, from: me, signalDataOpponent: null });\n    });\n\n    peer.on('stream', (currentStream) => {\n      userVideo.current.srcObject = currentStream;\n    });\n\n    // Send data to firebase\n    return new Promise((resolve) => {\n      const unsub = onSnapshot(doc(db, 'notifs', 'id'), (snapshot) => {\n        if (!snapshot.data.signalDataOpponent) { return; }// IDトークンのリフレッシュ\n        setCallAccepted(true);\n        peer.signal(snapshot.data.signalDataOpponent);\n        unsub();\n        resolve();\n      });\n    });\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n\n    connectionRef.current.destroy();\n\n    window.location.reload();\n  };\n\n  return (\n    <SocketContext.Provider value={{\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n    }}\n    >\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport { ContextProvider, SocketContext };\n"]},"metadata":{},"sourceType":"module"}